#### LOADING SVNC FACT DATA ####

# Loading libraries
library(RJDBC)
library(rJava)
library(tsauxfunc)

# Set JAVA_HOME, set max. memory, and load rJava library
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_65/bin')
#options(java.parameters="-Xmx2g")

# Checking Java version
.jinit()
print(.jcall("java/lang/System", "S", "getProperty", "java.version"))

# Create connection driver and open connection
## ORACLE:
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="C:/!zemskov/ORALIBS/ojdbc7.jar")
jdbcConnectionSVNC <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@//hx5-06.rosenergo.com:1521/svncgrey.rosenergo.com", "zemskov", "Lun2i2q")

# VERTICA:
verticaDriver <- JDBC(driverClass = "com.vertica.jdbc.Driver", 
                      classPath="C:/!zemskov/VERTICA_JDBC/vertica-jdbc-7.2.3-0.jar")
verticaConnection <- dbConnect(verticaDriver, 
                               "jdbc:vertica://vertica-red-srv.rosenergo.com:5433/DWH", 
                               "zemskov", "Lun2i2q")

# Testing connection with simple query
current_date <- dbGetQuery(jdbcConnectionSVNC, "SELECT current_date FROM dual")

begin_date <- "2011-01-01"
end_date <- Sys.Date()

# extract data with fact prices by dpg
extractSVNC_FACT <- function(connection, begin_date, end_date, ...) {
  message("starting query ...")
  message("from ", begin_date, " to ", end_date)
  query <- 
    paste("
          with table_period as
          (
            select s.begin_date, max(s.session_id) as session_id, s.final_calculation_flag
            from 
          (
            select 
              begin_date, 
              max(final_calculation_flag) as final_calculation_flag
            from 
              rep_nov.frs_pr_session
            where
              begin_date between to_date('",begin_date,"', 'yyyy-mm-dd') 
              and to_date('",end_date,"','yyyy-mm-dd')
            group by 
              begin_date
          ) ts,
            rep_nov.frs_pr_session s
          where 
            ts.begin_date = s.begin_date 
            and ts.final_calculation_flag = s.final_calculation_flag
          group by
            s.begin_date, s.final_calculation_flag
          order by
            begin_date
          )
          select
            s.session_id
            ,s.final_calculation_flag
            ,s.begin_date as tdate
            ,p.full_name as pname
            ,p.trader_code as pcode
            ,t.trader_code as tcode
            ,t.region_code as region_code
            ,substr(t.zsp_links, 1, 8) as zsp_code
            ,d.p_nc_unreg_avg * 1000	as P_nc_unreg_avg
            ,d.p_vc_unreg_avg * 1000	as P_vc_unreg_avg
          from
            table_period tp
            join rep_nov.frs_pr_session s 
              on TP.session_id = s.session_id and s.begin_date = tp.begin_date
            join rep_nov.app_session_list c 
              on TP.session_id = c.session_id
            join rep_nov.session_gtp_dim d 
              on TP.session_id = d.session_id
            left join rep_nov.session_gtp_dim sgd_1 
              on c.prev_session_id = sgd_1.session_id 
              and d.gtp_id = sgd_1.gtp_id,				  
            rep_nov.trader t,
            rep_nov.trader p
          where
            t.real_trader_id = d.gtp_id
            and t.parent_object_id = p.real_trader_id
            and t.trader_type = 100
            and s.begin_date between t.begin_date and t.end_date
            and s.begin_date between p.begin_date and p.end_date					 
          order by
            tdate, tcode ,final_calculation_flag")
  cursor <- dbGetQuery(connection, query)
  message("query was executed successfuly")
  return (cursor)
}
# retrieving data from the database
retrieved_svnc_fact <- extractSVNC_FACT(jdbcConnectionSVNC, begin_date, end_date)
retrieved_svnc_fact <- retrieved_svnc_fact[, c("TDATE", "PNAME", "PCODE", "TCODE",
                        "REGION_CODE", "ZSP_CODE", "P_VC_UNREG_AVG", "P_NC_UNREG_AVG")]

last_fact_date <- as.character(cut(as.Date(cut(Sys.Date(), "month")) - 1, "month"))
DPG_list <- unique(filterActuals(retrieved_svnc_fact, "TDATE", "TCODE", last_fact_date)$TCODE)
retrieved_svnc_fact <- retrieved_svnc_fact[which(retrieved_svnc_fact$TCODE %in% DPG_list), ]
# SAVE FACT DATA
write.csv(retrieved_svnc_fact, "C:/!zemskov/svnc_forecast/data_sources/fact_jul_nee_2016.csv")

# saving accumulated data
save(retrieved_svnc_fact, file = "SVNC_FACT_N_EE.RData")

#### LOADING PIKES AND VOLUMES ####

# PIKES

# creating connection to MFORMRED
jdbcConnectionMFORM <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@//lp-a6o11-42.rosenergo.com:1521/mformred.rosenergo.com", "zemskov", "Lun2i2q")

extractPikesFact <- function(connection, begin_date, end_date, ...) {
  message("starting query ...")
  message("from ", begin_date, " to ", end_date)
  query <- 
    paste("
            select 
              m.target_month as TDATE, 
              t.trader_code as TCODE,  
              t.price_zone_code as PZ, 
              m.p_fact as PIKE_FACT 
            from 
              mform.MFORM_gtp_m_arch m,
              mform.trader t
            where 
              m.end_ver = 999999999999999 and 
              m.calc_type = 2 
              and m.target_month between to_date('",begin_date,"','yyyy-mm-dd') 
                and to_date('",end_date,"','yyyy-mm-dd')
              and m.target_month between t.begin_date and t.end_date
              and m.gtp_id = t.real_trader_id
              and t.dpg_type = 1
            order by 
              m.target_month,  
              t.trader_code")
  cursor <- dbGetQuery(connection, query)
  message("query was executed successfuly")
  return (cursor)
}

retrieved_pikes <- extractPikesFact(jdbcConnectionMFORM, begin_date, end_date)
retrieved_pikes$TDATE <- as.Date(retrieved_pikes$TDATE)
svnc_with_pikes <- merge(retrieved_svnc_fact, retrieved_pikes, 
                         by = c("TCODE", "TDATE"), all.x = TRUE, sort = TRUE)
rm(retrieved_pikes)
save(svnc_with_pikes, file = "DATA_FOR_NN.RData")

# VOLUMES
extractVolumesFact <- function(connection, begin_date, end_date, ...) {
  message("starting query ...")
  message("from ", begin_date, " to ", end_date)
  query <- 
    paste("
          with TRADE_SESSIONS as
        		(select 
              trade_session_id 
            from 
              ODS_002.trade_session
            where 
              target_date between to_date('",begin_date,"','yyyy-mm-dd')
              and to_date('",end_date,"','yyyy-mm-dd')
              and valid_to_dttm > sysdate()
            )
          select   
            trunc(ts.target_date, 'month')  as TDATE
            ,t.trader_code as TCODE
            ,nvl(sum(d.volume)/1000, 0) as VOLUME
          from 
            ODS_002.trade_session ts,
            ODS_002.wh_deal_data_hour d,
            ODS_002.wh_trader t                                                
          where
            ts.trade_session_id = d.trade_session_id
            and ts.trade_session_id = t.trade_session_id
            and d.dpg_code = t.trader_code
            and d.deal_type = 3
            and d.direction = 1
            and d.volume > 0
            and (nvl(t.fed_station::NUMERIC,0) = 0 
              or t.is_guarantee_supply_co = 1)
            and ts.target_date between to_date('",begin_date,"','yyyy-mm-dd')
            and to_date('",end_date,"','yyyy-mm-dd') 
            and nvl(t.is_fsk::NUMERIC,0) = 0
            and nvl(t.is_unpriced_zone::NUMERIC,0) = 0
            and nvl(t.region_code::NUMERIC, 0) > 0
            and nvl(t.oes::NUMERIC,0) > 0
            and ts.valid_to_dttm > sysdate()
				    and d.valid_to_dttm > sysdate()
            and t.valid_to_dttm > sysdate()
            and ts.trade_session_id in (select * from TRADE_SESSIONS)
            and d.trade_session_id in (select * from TRADE_SESSIONS)
            and t.trade_session_id in (select * from TRADE_SESSIONS)
          group by
             t.price_zone_code
            ,t.trader_code
            ,t.region_code
            ,t.is_guarantee_supply_co
            ,trunc(ts.target_date , 'month')
          order by
            tcode
            ,region_code
            ,tdate")
  cursor <- dbGetQuery(connection, query)
  message("query was executed successfuly")
  return (cursor)
}

retrieved_volumes <- extractVolumesFact(verticaConnection, begin_date, end_date)
retrieved_volumes$tdate <- as.Date(retrieved_volumes$TDATE)
svnc_pikes_volumes <- merge(svnc_with_pikes, retrieved_volumes, 
                            by = c("TDATE", "TCODE"), all.x = TRUE, sort = TRUE)
#rm(retrieved_volumes)
#save(svnc_pikes_volumes, file = "svnc_pikes_volumes.RData")

#### KOM Prices ####
extractKOMPrices <- function(connection, begin_date, end_date, ...) {
  message("starting query ...")
  message("from ", begin_date, " to ", end_date)
  query <- 
    paste("
          select 
            target_date as TDATE,
            price_zone_code as PZ,
            price_kom
          from 
  				  mform.result_com_total 
          where
            target_date between to_date('",begin_date,"','yyyy-mm-dd') 
            and to_date('",end_date,"','yyyy-mm-dd')
            and end_ver = 999999999999999
          ")
  cursor <- dbGetQuery(connection, query)
  message("query was executed successfuly")
  return (cursor)
}
retrieved_KOM_P <- extractKOMPrices(jdbcConnectionMFORM, begin_date, end_date)


