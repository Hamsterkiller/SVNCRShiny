{
    "contents" : "##### Initializing ####\nrm(list = ls())\nlibrary(tsauxfunc)\nsetwd(\"C:/!zemskov/svnc_forecast/data_sources\")\n# SVNC\nload(\"SVNC_P_V_KOM_FACT.RData\")\n# Pikes\nload(\"PIKES_FACT.RData\")\n# Volumes\nload(\"VOLUMES_FACT.RData\")\n# KOM Prices\nload(\"KOM_PZ_PRICES.RData\")\n# DPG-info\nload(\"DPG_GP_INFO.RData\")\n# forecasting month\nforecasting_month <- as.Date(cut(as.Date(Sys.Date()) + 15, \"month\"))\nlast_fact_date <- as.character(cut(forecasting_month - 61, \"month\"))\n\n\n################ PREPROCESSING ################\n\n# SVNC\n# Filtering data by the forecasting month\nsvnc_src <- svnc_p_v_kom\n#svnc_src <- svnc_src[svnc_src$TDATE < last_fact_date, ]\nrm(svnc_p_v_kom)\n#svnc_src$date <- as.Date(svnc_src$TDATE)\ndata <- svnc_src\nsvnc_src <- svnc_src[, c('TDATE', 'TCODE', 'P_NC_UNREG_AVG', 'P_VC_UNREG_AVG', \n                         'VOLUME', 'PIKE_FACT')]\nsvnc_src <- filterActuals(svnc_src, \"TDATE\", \"TCODE\", last_fact_date)\nsvnc_src$TCODE <- as.factor(svnc_src$TCODE)\nsvnc_hs <- rangeByHistorySize(svnc_src, as.factor(svnc_src$TCODE))\nsvnc_hs_merged <- merge(svnc_src, svnc_hs, \n                        by.x = 'TCODE', by.y = 'FactorLevel', all.x = TRUE, sort = TRUE)\nsvnc_hs_merged <- svnc_hs_merged[order(svnc_hs_merged$TCODE, svnc_hs_merged$TDATE), ]\nrm(svnc_hs)\nsvnc_short <- svnc_hs_merged[svnc_hs_merged$HistorySize < 24 , ] \nsvnc_long <- svnc_hs_merged[svnc_hs_merged$HistorySize >= 24 , ]\n\n# PIKES\n# Filtering data by the forecasting minth\npikes <- pikes[pikes$TDATE < forecasting_month, ]\nSVNC_DPG_list <- unique(svnc_hs_merged[svnc_hs_merged$TDATE > forecasting_month - 65, ]$TCODE)\nrm(svnc_hs_merged)\npikes <- pikes[which(pikes$TCODE %in% SVNC_DPG_list), ]\n# ranging by history\npikes_hs <- rangeByHistorySize(pikes, as.factor(pikes$TCODE))\npikes_hs_merged <- merge(pikes, pikes_hs, \n                        by.x = 'TCODE', by.y = 'FactorLevel', all.x = TRUE, sort = TRUE)\npikes_hs_merged <- pikes_hs_merged[order(pikes_hs_merged$TCODE, pikes_hs_merged$TDATE), ]\nrm(pikes_hs)\npikes_short <- pikes_hs_merged[pikes_hs_merged$HistorySize < 24 , ] \npikes_long <- pikes_hs_merged[pikes_hs_merged$HistorySize >= 24 , ]\n\n# VOLUMES\n# Filtering data by the forecasting minth\nretrieved_volumes <- retrieved_volumes[retrieved_volumes$TDATE < forecasting_month, ]\nretrieved_volumes <- retrieved_volumes[which(retrieved_volumes$TCODE %in% SVNC_DPG_list), ]\nretrieved_volumes$TDATE <- as.Date(retrieved_volumes$TDATE)\n# ranging by history\nvolumes_hs <- rangeByHistorySize(retrieved_volumes, as.factor(retrieved_volumes$TCODE))\nvolumes_hs_merged <- merge(retrieved_volumes, volumes_hs, \n                         by.x = 'TCODE', by.y = 'FactorLevel', all.x = TRUE, sort = TRUE)\nvolumes_hs_merged <- volumes_hs_merged[order(volumes_hs_merged$TCODE, \n                                             volumes_hs_merged$TDATE), ]\nrm(volumes_hs)\nvolumes_short <- volumes_hs_merged[volumes_hs_merged$HistorySize < 24 , ] \nvolumes_long <- volumes_hs_merged[volumes_hs_merged$HistorySize >= 24 , ]\n\n\n#### FORECASTING PIKES AND VOLUMES ####\n\n# PIKES AND VOLUMES LONG\nfcst_pike_long <- hwforecast_n_step_fwrd(pikes_long, \"TCODE\", \n                                         \"TDATE\", \"PIKE_FACT\", 1, 1)\nfcst_volumes_long <- hwforecast_n_step_fwrd(volumes_long, \"TCODE\", \n                                           \"TDATE\", \"VOLUME\", 1, 1)\n\n# PIKES AND VOLUMES SHORT\nfcst_pike_short <- shortForecast(pikes_short, \"TCODE\", \n                                 \"TDATE\", \"PIKE_FACT\", 1, 1)\nfcst_volumes_short <- shortForecast(volumes_short, \"TCODE\", \n                                   \"TDATE\", \"VOLUME\", 1, 1)\n\n################ PREDICTION SVNC FOR LONG DATA ################\n\npredict_price <- function(cur_ts, h, n) {\n  tryCatch(\n    {\n      print(\"Building Holt-Winters model...\")\n      current_model <- HoltWinters(cur_ts)\n      return (predict(current_model, n = h)[n])\n    }, error = function(cond) {\n      message(\"Holt-Winters model optimization failed to converge!\")\n      print(\"Starting calculation with default algorithm...\")\n      print(\"Algorithm: prediction = prev_month_cur_year/\n            (prev_month_prev_year*cur_month_prev_year)\")\n      return (last(lag(cur_ts)) / last(lag(cur_ts, 13)) * last(lag(cur_ts, 12)))\n    }\n  )\n}\n\nhwforecast_n_step_fwrd <- function(df, group.var, date.var, target.var, h, n) {\n  require(xts)\n  require(tseries)\n  predictions <- list()\n  # safe copying\n  tbl <- df[, c(group.var , date.var, target.var)]\n  tbl <- tbl[order(tbl[ , group.var], tbl[ , date.var]), ]\n  for (i in unique(tbl[, group.var])) {\n    # partitioning by group_var values\n    one_piece  <- tbl[which(tbl[ , group.var] == i), c(date.var, target.var)]\n    start_date <- min(one_piece[, date.var])\n    # making a TS object\n    one_piece_ts <- toTimeSeries(one_piece, date.var, 12, start_date)\n    prediction_hw <- predict_price(one_piece_ts, h, n)\n    prediction_arima <- predict_price_short(one_piece_ts, h, n)\n    prediction <- mean(c(prediction_hw, prediction_arima))\n    if (prediction < 0) prediction <- prediction_arima\n    predictions[i] <- prediction\n    print(predictions[i])\n  }\n  return (predictions)\n}\n\n# SVNC EE and N\nfcst_svnc_m_long <- hwforecast_n_step_fwrd(svnc_long, \"TCODE\", \n                                           \"TDATE\", \"P_NC_UNREG_AVG\", 2, 2)\nfcst_svnc_ee_long <- hwforecast_n_step_fwrd(svnc_long, \"TCODE\", \n                                           \"TDATE\", \"P_VC_UNREG_AVG\", 2, 2)\n\n# SHORT\n\n#predict_price_short <- function(cur_ts, nsteps, n) {\n  require(forecast)\n  tryCatch(\n    {\n      print(\"Building Arima model...\")\n      current_model <- auto.arima(cur_ts)\n      return (forecast(current_model, h = nsteps)$mean[n])\n    }, error = function(cond) {\n      message(\"Arima model optimization failed to converge!\")\n      message(\"MA prediction failed!\")\n      print(\"Calculating simple mean...\")\n      return (mean(cur_ts))\n    }\n  )\n}\n\n#shortForecast <- function(df, group.var, date.var, target.var, h, n) {\n  require(TTR)\n  require(xts)\n  require(tseries)\n  predictions <- list()\n  # safe copying\n  tbl <- df[, c(group.var , date.var, target.var)]\n  tbl <- tbl[order(tbl[ , group.var], tbl[ , date.var]), ]\n  for (i in unique(tbl[, group.var])) {\n    # partitioning by group_var values\n    one_piece  <- tbl[which(tbl[ , group.var] == i), c(date.var, target.var)]\n    start_date <- min(one_piece[, date.var])\n    # making a TS object\n    one_piece_ts <- toTimeSeries(one_piece, \"date\", 1, start_date)\n    predictions[i] <- predict_price_short(one_piece_ts, h, n)\n    print(predictions[i])\n      }\n  return (predictions)\n}\n\n# SVNC EE and N\n\nfcst_svnc_m_short <- shortForecast(svnc_short, \"TCODE\", \n                                           \"TDATE\", \"P_NC_UNREG_AVG\", 2, 2)\nfcst_svnc_ee_short <- shortForecast(svnc_short, \"TCODE\", \n                                           \"TDATE\", \"P_VC_UNREG_AVG\", 2, 2)\n\n# merging forecasted values\ntcodes_long <- data.frame(TCODE = names(fcst_svnc_m_long),\n                          P_NC_UNREG_AVG = as.numeric(fcst_svnc_m_long), \n                          P_VC_UNREG_AVG = as.numeric(fcst_svnc_ee_long))\ntcodes_short <- data.frame(TCODE = names(fcst_svnc_m_short), \n                          P_NC_UNREG_AVG = as.numeric(fcst_svnc_m_short), \n                          P_VC_UNREG_AVG = as.numeric(fcst_svnc_ee_short))\ntcodes <- rbind(tcodes_long, tcodes_short)\n\ntpcodesregs <- data[data$TDATE == as.Date('2016-06-01'), \n                              c('TCODE', 'PCODE', 'REGION_CODE')]\nresult_SVNC <- merge(tpcodesregs, tcodes, \n                by = 'TCODE', all.x = TRUE, sort = TRUE)[, c('TCODE', 'PCODE', 'REGION_CODE', \n                                                             'P_NC_UNREG_AVG', 'P_VC_UNREG_AVG')]\n# joining pikes and volumes\n# PIKES\npikes_long <- data.frame(TCODE = names(fcst_pike_long),\n                          PIKE = as.numeric(fcst_pike_long))\npikes_short <- data.frame(TCODE = names(fcst_pike_short),\n                          PIKE = as.numeric(fcst_pike_short))\npikes_forecast <- rbind(pikes_long, pikes_short)\n#VOLUMES\nvolumes_long <- data.frame(TCODE = names(fcst_volumes_long),\n                         VOLUME = as.numeric(fcst_volumes_long))\nvolumes_short <- data.frame(TCODE = names(fcst_volumes_short),\n                          VOLUME = as.numeric(fcst_volumes_short))\nvolumes_forecast <- rbind(volumes_long, volumes_short)\n\n# merging all together\nresult <- merge(result_SVNC, pikes_forecast, by = 'TCODE', all.x = TRUE, sort = TRUE)\nresult <- merge(result, volumes_forecast, by = 'TCODE', all.x = TRUE, sort = TRUE)\nresult <- result[result$TCODE %in% dpg_gp_info$TCODE, ] \n\n# calculating costs of N and EE\nresult$N_COST <- result$P_NC_UNREG_AVG * result$PIKE\nresult$EE_COST <- result$P_VC_UNREG_AVG * result$VOLUME\nlibrary(dplyr)\nresult_grouped <- summarize(group_by(result, PCODE, REGION_CODE), \n                            PRICE_N = sum(N_COST)/sum(PIKE), \n                            PRICE_EE = sum(EE_COST)/sum(VOLUME))\nresult_grouped <- result_grouped[with(result_grouped, order(PCODE, REGION_CODE)), ]\n\nlibrary(xlsx)\nwrite.xlsx(as.data.frame(result_grouped), file = 'svnc_m_ee_mar2017_fcst_weighted_avg.xlsx', sheetName = 'SVNC_M_ee')\n\n\n\n#### Formating for output ####\ndpg_gp_info$dpg_count <- 1\n# selecting only PCODES with one dpg in region\nsingle_dpg <- dpg_gp_info %>%\n  group_by(PCODE, REGION_CODE) %>%\n  summarize(total_dpg_count = sum(dpg_count)) %>%\n  filter(total_dpg_count == 1) %>%\n  select(PCODE, REGION_CODE)\n# selecting only PCODES with more than one dpg in region\nmultiple_dpgs <- dpg_gp_info %>%\n  group_by(PCODE, PNAME, REGION_CODE, REGION_NAME) %>%\n  summarize(total_dpg_count = sum(dpg_count)) %>%\n  filter(total_dpg_count != 1) %>%\n  select(PCODE, PNAME, REGION_CODE, REGION_NAME)\n\nsingle_dpg <- merge(dpg_gp_info, single_dpg, \n                    by = c('PCODE', 'REGION_CODE'), all.y = TRUE) %>%\n  select(PCODE, PNAME, REGION_CODE, REGION_NAME, TCODE)\n\n# merging output data\noutput <- merge(result_grouped, single_dpg, \n                by = c('PCODE', 'REGION_CODE'), all.x = TRUE, sort = FALSE) %>%\n  merge(multiple_dpgs, by = c('PCODE', 'REGION_CODE'), all.x = TRUE, sort = TRUE)\noutput$PNAME <- ifelse(!is.na(output$PNAME.x), output$PNAME.x, output$PNAME.y) \noutput$REGION_NAME <- ifelse(!is.na(output$REGION_NAME.x), output$REGION_NAME.x, \n                             output$REGION_NAME.y)\noutput$REGION_CODE <- as.numeric(output$REGION_CODE)\noutput <- output[order(output$PCODE, output$REGION_CODE), \n                 c('PNAME', 'TCODE', 'REGION_CODE', \n                     'REGION_NAME', 'PCODE', 'PRICE_EE', 'PRICE_N')]\n\nwrite.xlsx(output, file = \"FORMATTED_OUTPUT.xlsx\", \n           sheetName = \"svnc_forecast\", row.names = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1472462734086.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "87|41|101|0|\n103|79|124|0|\n134|53|148|0|\n150|71|168|0|\n",
    "hash" : "1436845016",
    "id" : "D75BF327",
    "lastKnownWriteTime" : 1488366024,
    "path" : "C:/!zemskov/svnc_forecast/svnc_m_prediction.R",
    "project_path" : "svnc_m_prediction.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}